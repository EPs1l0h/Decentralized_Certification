Here's the directory structure and code files:

Directory Structure:
📄 mock.ts
📄 App.vue
📄 main.ts
📁 access
    📄 accessEnum.js
    📄 checkAccess.js
    📄 accessEnum.ts
    📄 checkAccess.ts
📄 main.js
📁 components
    📄 GlobalHeader.vue
📁 layouts
    📄 BasicLayout.vue
    📄 SimpleLayout.vue
📁 views
    📄 HolderView.vue
    📄 RegisterView.vue
    📄 LoginView.vue
    📄 VerifyView.vue
    📄 HomeView.vue
    📄 BlockInfoView.vue
📁 assets
📄 shims-vue.d.ts
📁 store
    📄 user.js
    📄 index.js
    📄 index.ts
    📄 user.ts
📁 router
    📄 routes.ts
    📄 index.js
    📄 routes.js
    📄 index.ts

Code Files:
----- Start of mock.ts -----
// mock.ts
export const vcList = [
  {
    id: "1",
    type: ["VerifiableCredential", "UniversityDegreeCredential"],
    issuer: "did:example:university",
    issuanceDate: "2023-06-01T00:00:00Z",
    credentialSubject: {
      id: "did:example:student",
      degree: {
        type: "BachelorDegree",
        name: "计算机科学与技术",
      },
    },
  },
  {
    id: "2",
    type: ["VerifiableCredential", "SkillCertificateCredential"],
    issuer: "did:example:company",
    issuanceDate: "2023-06-02T00:00:00Z",
    credentialSubject: {
      id: "did:example:employee",
      certificate: {
        type: "SkillCertificate",
        name: "Java开发工程师",
      },
    },
  },
  {
    id: "3",
    type: ["VerifiableCredential", "MembershipCredential"],
    issuer: "did:example:organization",
    issuanceDate: "2023-06-03T00:00:00Z",
    credentialSubject: {
      id: "did:example:member",
      membership: {
        type: "PremiumMembership",
        name: "优秀会员",
      },
    },
  },
];

export const vpRequestList = [
  {
    id: "1",
    verifier: "did:example:company",
    requestDate: "2023-06-04T00:00:00Z",
  },
  {
    id: "2",
    verifier: "did:example:government",
    requestDate: "2023-06-05T00:00:00Z",
  },
];

----- End of mock.ts -----

----- Start of App.vue -----
<template>
  <div id="app">
    <component :is="layoutComponent">
      <router-view />
    </component>
  </div>
</template>

<style>
#app {
}
</style>

<script setup lang="ts">
import BasicLayout from "@/layouts/BasicLayout.vue";
import SimpleLayout from "@/layouts/SimpleLayout.vue";
import { useRouter, useRoute } from "vue-router";
import { useStore } from "vuex";
import { onMounted, computed } from "vue";
import ACCESS_ENUM from "@/access/accessEnum";

const route = useRoute();
const layoutComponent = computed(() => route.meta.layout || BasicLayout);

/**
 * 全局初始化函数，有全局单词调用的代码，都可以写在这里
 */
const doInit = () => {
  console.log("hello 欢迎来到我的项目");
};

onMounted(() => {
  doInit();
});

const router = useRouter();
const store = useStore();

// 路由守卫逻辑
router.beforeEach((to, from, next) => {
  console.log("to.meta?.access", to.meta?.access);
  console.log("store.state.user.loginUser", store.state.user.loginUser);

  if (to.meta?.access === ACCESS_ENUM.ADMIN) {
    if (store.state.user.loginUser?.userRole !== ACCESS_ENUM.ADMIN) {
      next("/noAuth");
      return;
    }
  }

  if (
    to.meta?.access &&
    store.state.user.loginUser.userRole === ACCESS_ENUM.NOT_LOGIN
  ) {
    next("/login");
    return;
  }

  next();
});
</script>

----- End of App.vue -----

----- Start of main.ts -----
import { createApp } from "vue";
import App from "./App.vue";
import ElementPlus from "element-plus";
import "element-plus/dist/index.css";
import "@/assets/global.css";
import router from "./router";
import store from "./store";
createApp(App).use(ElementPlus).use(store).use(router).mount("#app");

----- End of main.ts -----

----- Start of main.js -----
import { createApp } from "vue";
import App from "./App.vue";
import ElementPlus from "element-plus";
import "element-plus/dist/index.css";
import "@/assets/global.css";
import router from "./router";
import store from "./store";
createApp(App).use(ElementPlus).use(store).use(router).mount("#app");
//# sourceMappingURL=main.js.map
----- End of main.js -----

----- Start of shims-vue.d.ts -----
/* eslint-disable */
declare module '*.vue' {
  import type { DefineComponent } from 'vue'
  const component: DefineComponent<{}, {}, any>
  export default component
}

----- End of shims-vue.d.ts -----

----- Start of access/accessEnum.js -----
/**
 * @description 权限定义
 * @enum {string}
 */
const ACCESS_ENUM = {
    NOT_LOGIN: "notLogin",
    USER: "user",
    ADMIN: "admin",
};
export default ACCESS_ENUM;
//# sourceMappingURL=accessEnum.js.map
----- End of access/accessEnum.js -----

----- Start of access/checkAccess.js -----
/**
 * 检查用户是否有权限（判断当前登录用户是否具有某个权限）
 * @param loginUser 当前登录用户
 * @param needAccess 需要的权限
 * @return boolean 有无权限
 */
import ACCESS_ENUM from "@/access/accessEnum";
const checkAccess = (loginUser, needAccess = ACCESS_ENUM.NOT_LOGIN) => {
    // 获取当前登录用户的权限（如果没有loginUser，则默认为未登录）
    const loginUserAccess = loginUser?.userRole ?? ACCESS_ENUM.NOT_LOGIN;
    if (needAccess === ACCESS_ENUM.NOT_LOGIN) {
        // 不需要登录权限
        return true;
    }
    if (needAccess === ACCESS_ENUM.USER) {
        if (loginUserAccess === ACCESS_ENUM.NOT_LOGIN) {
            return false;
        }
    }
    if (needAccess === ACCESS_ENUM.ADMIN) {
        if (loginUserAccess === ACCESS_ENUM.ADMIN) {
            return true;
        }
    }
    return false;
};
export default checkAccess;
//# sourceMappingURL=checkAccess.js.map
----- End of access/checkAccess.js -----

----- Start of access/accessEnum.ts -----
/**
 * @description 权限定义
 * @enum {string}
 */
const ACCESS_ENUM = {
  NOT_LOGIN: "notLogin",
  USER: "user",
  ADMIN: "admin",
};

export default ACCESS_ENUM;

----- End of access/accessEnum.ts -----

----- Start of access/checkAccess.ts -----
import AccessEnum from "@/access/accessEnum";

/**
 * 检查用户是否有权限（判断当前登录用户是否具有某个权限）
 * @param loginUser 当前登录用户
 * @param needAccess 需要的权限
 * @return boolean 有无权限
 */
import ACCESS_ENUM from "@/access/accessEnum";
const checkAccess = (loginUser: any, needAccess = ACCESS_ENUM.NOT_LOGIN) => {
  // 获取当前登录用户的权限（如果没有loginUser，则默认为未登录）
  const loginUserAccess = loginUser?.userRole ?? ACCESS_ENUM.NOT_LOGIN;
  if (needAccess === ACCESS_ENUM.NOT_LOGIN) {
    // 不需要登录权限
    return true;
  }
  if (needAccess === ACCESS_ENUM.USER) {
    if (loginUserAccess === ACCESS_ENUM.NOT_LOGIN) {
      return false;
    }
  }
  if (needAccess === ACCESS_ENUM.ADMIN) {
    if (loginUserAccess === ACCESS_ENUM.ADMIN) {
      return true;
    }
  }
  return false;
};

export default checkAccess;

----- End of access/checkAccess.ts -----

----- Start of components/GlobalHeader.vue -----
<template>
  <el-row id="globalHeader" class="grid-demo" align="middle" :wrap="false">
    <el-col :span="22">
      <el-menu
        mode="horizontal"
        :default-active="$route.path"
        @select="doMenuClick"
      >
        <el-menu-item key="0" :style="{ padding: 0, marginRight: '38px' }">
          <div class="title-bar">
            <img class="logo" src="../assets/logo.svg" />
            <div class="title">DeCert</div>
          </div>
        </el-menu-item>
        <el-menu-item
          v-for="route in visibleRoutes"
          :key="route.path"
          :index="route.path"
        >
          {{ route.name }}
        </el-menu-item>
      </el-menu>
    </el-col>
    <el-col :span="2">
      <div class="user-info">
        {{ userName }}
      </div>
    </el-col>
  </el-row>
</template>

<script setup lang="ts">
import { routes } from "../router/routes";
import { useRoute, useRouter } from "vue-router";
import { computed } from "vue";
import { useStore } from "vuex";
import checkAccess from "@/access/checkAccess";
import ACCESS_ENUM from "@/access/accessEnum";

const router = useRouter();
const store = useStore();

const userName = computed(() => store.state.user.loginUser.userName);

// 展示在菜单的路由数组
const visibleRoutes = computed(() => {
  // return routes.filter((item, index) => {
  //   if (item.meta?.hideInMenu) {
  //     return false;
  //   }
  //   if (!checkAccess(store.state.user.loginUser, item.meta?.access as string)) {
  //     return false;
  //   }
  //   return true;
  // });
  return routes;
});

setTimeout(() => {
  store.dispatch("user/getLoginUser");
}, 3000);

const doMenuClick = (index: string) => {
  router.push(index);
};

const handleUserInfoClick = () => {
  if (store.state.user.loginUser.userRole === ACCESS_ENUM.NOT_LOGIN) {
    router.push("/login");
  }
};
</script>

<style scoped>
.title-bar {
  display: flex;
  align-items: center;
}

.title {
  color: #444;
  margin-left: 16px;
}

.logo {
  height: 96px;
}

.user-info {
}

/* 添加以下样式 */
:deep(.el-menu-item.is-active) {
  background-color: #e6f7ff;
}
</style>

----- End of components/GlobalHeader.vue -----

----- Start of layouts/BasicLayout.vue -----
<template>
  <div id="basicLayout">
    <el-container style="min-height: 100vh">
      <el-header class="header">
        <GlobalHeader />
      </el-header>
      <el-main class="content">
        <router-view />
      </el-main>
    </el-container>
  </div>
</template>

<style scoped>
#basicLayout {
}

#basicLayout .header {
  margin-bottom: 16px;
}

#basicLayout .content {
  margin-bottom: 16px;
  padding: 20px;
}
</style>
<script setup lang="ts">
import GlobalHeader from "@/components/GlobalHeader.vue";
</script>

----- End of layouts/BasicLayout.vue -----

----- Start of layouts/SimpleLayout.vue -----
<!-- src/layouts/SimpleLayout.vue -->
<template>
  <div class="simple-layout">
    <router-view />
  </div>
</template>

<style scoped>
.simple-layout {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #f0f2f5;
}
</style>

----- End of layouts/SimpleLayout.vue -----

----- Start of views/HolderView.vue -----
<!-- HolderDashboard.vue -->
<template>
  <div class="holder-dashboard">
    <!-- 持有者信息 -->
    <el-card class="holder-info">
      <template #header>
        <div class="card-header">
          <span>持有者信息</span>
          <el-icon class="icon" color="#409EFF"><UserFilled /></el-icon>
        </div>
      </template>
      <div class="info-item">
        <span class="label">用户名:</span>
        <span class="value">{{ holderInfo.userName }}</span>
      </div>
      <div class="info-item">
        <span class="label">DID:</span>
        <span class="value">{{ holderInfo.did }}</span>
      </div>
    </el-card>

    <!-- VC列表 -->
    <el-card class="certificate-list">
      <template #header>
        <div class="card-header">
          <span>VC列表</span>
          <el-button
            type="primary"
            @click="goToApplyCertificate"
            icon="el-icon-plus"
            class="apply-btn"
          >
            向颁发者申请VC
          </el-button>
        </div>
      </template>
      <el-row :gutter="20">
        <el-col :span="8" v-for="cert in certificates" :key="cert.id">
          <el-card shadow="hover">
            <div class="cert-info">
              <div class="cert-type">{{ cert.type }}</div>
              <div class="cert-issuer">颁发者: {{ cert.issuer }}</div>
              <div class="cert-date">颁发时间: {{ cert.issuanceDate }}</div>
            </div>
          </el-card>
        </el-col>
      </el-row>
    </el-card>

    <!-- VP请求列表 -->
    <el-card class="vp-request-list">
      <template #header>
        <div class="card-header">
          <span>VP请求列表</span>
          <el-icon class="icon" color="#67C23A"><Bell /></el-icon>
        </div>
      </template>
      <el-table :data="vpRequests" style="width: 100%">
        <el-table-column prop="verifier" label="请求者"></el-table-column>
        <el-table-column prop="requestTime" label="请求时间"></el-table-column>
        <el-table-column label="操作">
          <template #default="scope">
            <el-button type="primary" @click="goToSubmitVP(scope.row)">
              向验证者提交VP
            </el-button>
          </template>
        </el-table-column>
      </el-table>
    </el-card>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted } from "vue";
import { useRouter } from "vue-router";
import { Bell, UserFilled } from "@element-plus/icons-vue";
import axios from "axios";
import { vcList, vpRequestList } from "@/mock";

const router = useRouter();

const holderInfo = ref({
  userName: "",
  did: "",
});

const certificates = ref(vcList);
const vpRequests = ref(vpRequestList);

onMounted(async () => {
  await getHolderInfo();
  await getVPRequests();
});

const getHolderInfo = async () => {
  // 模拟从后端获取持有者信息
  const mockHolderInfo = {
    userName: "张三",
    did: "did:example:123456789abcdefghi",
  };
  holderInfo.value = mockHolderInfo;

  // 真实逻辑,与后端交互
  // try {
  //   const response = await axios.post('/get_holder_info', {})
  //   const { isValid, userName, did } = response.data
  //   if (isValid) {
  //     holderInfo.value = { userName, did }
  //   }
  // } catch (error) {
  //   console.error('Error fetching holder info:', error)
  // }
};

const getVPRequests = async () => {
  // 模拟从后端获取VP请求列表
  // try {
  //   const response = await axios.post('/get_be_asked_VP_list', {})
  //   const { isValid, vpRequests: vp } = response.data
  //   if (isValid) {
  //     vpRequests.value = vp
  //   }
  // } catch (error) {
  //   console.error('Error fetching VP requests:', error)
  // }
};

const goToApplyCertificate = () => {
  router.push("/applyCertificate");
};

const goToSubmitVP = (request) => {
  router.push({
    path: "/submitVP",
    query: { requestId: request.id },
  });
};
</script>

<style scoped>
.holder-dashboard {
  max-width: 1200px;
  margin: 20px auto;
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.card-header span {
  font-size: 20px;
  font-weight: bold;
}

.holder-info,
.certificate-list,
.vp-request-list {
  margin-bottom: 20px;
}

.info-item {
  margin-bottom: 10px;
}

.label {
  display: inline-block;
  width: 80px;
  font-weight: bold;
}

.cert-info {
  height: 200px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.cert-type {
  font-size: 24px;
  font-weight: bold;
  margin-bottom: 20px;
}

.apply-btn {
  display: flex;
  align-items: center;
}
</style>

----- End of views/HolderView.vue -----

----- Start of views/RegisterView.vue -----
<template>
  <div class="register-container">
    <el-card class="register-card">
      <h2 class="register-title">注册 DeCert</h2>
      <el-form
        ref="registerForm"
        :model="registerForm"
        :rules="registerRules"
        label-width="100px"
      >
        <el-form-item label="用户名" prop="username">
          <el-input
            v-model="registerForm.username"
            placeholder="请输入用户名"
          ></el-input>
        </el-form-item>
        <el-form-item label="密码" prop="password">
          <el-input
            type="password"
            v-model="registerForm.password"
            placeholder="请输入密码"
          ></el-input>
        </el-form-item>
        <el-form-item label="确认密码" prop="confirmPassword">
          <el-input
            type="password"
            v-model="registerForm.confirmPassword"
            placeholder="请再次输入密码"
          ></el-input>
        </el-form-item>
        <el-form-item label="签名算法" prop="algorithm">
          <el-select
            v-model="registerForm.algorithm"
            placeholder="请选择签名算法"
          >
            <el-option label="SM2" value="SM2"></el-option>
            <el-option label="RSA" value="RSA"></el-option>
          </el-select>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="handleRegister">注册</el-button>
          <el-button @click="goToLogin">返回登录</el-button>
          <el-button @click="goToHome">返回首页</el-button>
        </el-form-item>
      </el-form>
    </el-card>
  </div>
</template>

<script setup lang="ts">
import { reactive, ref } from "vue";
import { useRouter } from "vue-router";
import { FormInstance, FormRules } from "element-plus";
import axios from "axios";

const router = useRouter();

const registerForm = reactive({
  username: "",
  password: "",
  confirmPassword: "",
  algorithm: "",
});

const registerRules = reactive<FormRules>({
  username: [{ required: true, message: "请输入用户名", trigger: "blur" }],
  password: [{ required: true, message: "请输入密码", trigger: "blur" }],
  confirmPassword: [
    { required: true, message: "请再次输入密码", trigger: "blur" },
    {
      validator: (rule, value, callback) => {
        if (value !== registerForm.password) {
          callback(new Error("两次输入的密码不一致"));
        } else {
          callback();
        }
      },
      trigger: "blur",
    },
  ],
  algorithm: [{ required: true, message: "请选择签名算法", trigger: "change" }],
});

const registerFormRef = ref<FormInstance>();

const handleRegister = async () => {
  if (!registerFormRef.value) return;
  await registerFormRef.value.validate(async (valid) => {
    if (valid) {
      try {
        const response = await axios.post(
          "http://localhost:8000/register_post",
          {
            name: registerForm.username,
            password: registerForm.password,
            alg: registerForm.algorithm,
          }
        );
        const { isValid } = response.data;
        if (isValid) {
          router.push("/login");
        } else {
          console.error("Registration failed.");
        }
      } catch (error) {
        console.error("Error registering:", error);
      }
    }
  });
};

const goToLogin = () => {
  router.push("/login");
};
const goToHome = () => {
  router.push("/");
};
</script>
<style scoped>
.register-container {
  width: 100%;
  max-width: 400px;
  padding: 20px;
}
</style>

----- End of views/RegisterView.vue -----

----- Start of views/LoginView.vue -----
<template>
  <div class="login-container">
    <el-card class="login-card">
      <h2 class="login-title">欢迎登录 DeCert</h2>
      <el-form
        ref="loginFormRef"
        :model="loginForm"
        :rules="loginRules"
        label-width="80px"
      >
        <el-form-item label="用户名" prop="username">
          <el-input v-model="_username" placeholder="请输入用户名"></el-input>
        </el-form-item>
        <el-form-item label="密码" prop="password">
          <el-input
            type="password"
            v-model="_password"
            placeholder="请输入密码"
          ></el-input>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="handleLogin">登录</el-button>
          <el-button @click="goToRegister">注册</el-button>
          <el-button @click="goToHome">返回首页</el-button>
        </el-form-item>
      </el-form>
    </el-card>
  </div>
</template>

<script setup lang="ts">
import { reactive, ref } from "vue";
import { useRouter } from "vue-router";
import { useStore } from "vuex";
import { FormInstance, FormRules } from "element-plus";
import axios from "axios";

const router = useRouter();
const store = useStore();

const loginForm = reactive({
  username: "",
  password: "",
});

const _username = ref("");
const _password = ref("");
const loginRules = reactive<FormRules>({
  username: [{ required: true, message: "请输入用户名", trigger: "blur" }],
  password: [{ required: true, message: "请输入密码", trigger: "blur" }],
});

const loginFormRef = ref<FormInstance>();

const handleLogin = async () => {
  loginForm.username = _username.value;
  loginForm.password = _password.value;
  console.log("loginForm:", loginForm);
  console.log("loginFormRef:", loginFormRef.value);

  if (!loginFormRef.value) return;
  await loginFormRef.value.validate(async (valid) => {
    if (valid) {
      // 模拟登录成功
      console.log("登录成功?");
      store.dispatch("user/getLoginUser", {
        userName: "测试用户名",
        userRole: "user",
      });
      router.push("/home");
      console.log("登录成功?2");

      // 真实逻辑,与后端交互
      //   try {

      //     const response = await axios.post("http://localhost:8000/login_post", {
      //       name: loginForm.username,
      //       password: loginForm.password,
      //     });
      //     const { isValid } = response.data;
      //     if (isValid) {
      //       store.dispatch("user/getLoginUser");
      //       router.push("/home");
      //     } else {
      //       console.error("Login failed.");
      //     }
      //   } catch (error) {
      //     console.error("Error logging in:", error);
      //   }
    }
  });
};

const goToRegister = () => {
  router.push("/register");
};
const goToHome = () => {
  router.push("/");
};
</script>
<style scoped>
.login-container {
  width: 100%;
  max-width: 400px;
  padding: 20px;
}
</style>

----- End of views/LoginView.vue -----

----- Start of views/VerifyView.vue -----
<template>
  <div class="verify-view">
    <el-row justify="center" class="header">
      <el-col :span="24">
        <h1>验证证书</h1>
        <p>提供安全、透明、高效的证书验证服务。</p>
      </el-col>
    </el-row>
    <el-row justify="center" class="step-row">
      <el-col :span="20">
        <el-steps :active="step" finish-status="success">
          <el-step title="发起验证请求" />
          <el-step title="持有者提交证书" />
          <el-step title="验证证书" />
        </el-steps>
      </el-col>
    </el-row>
    <el-row justify="center">
      <el-col :span="12">
        <!-- 发起验证请求界面 -->
        <el-card v-if="step === 0" shadow="hover">
          <template #header>
            <div class="card-header">
              <span>发起验证请求</span>
              <el-icon class="icon" color="#f6d365"><Promotion /></el-icon>
            </div>
          </template>
          <el-form ref="requestForm" :model="requestForm" label-width="100px">
            <el-form-item label="持有者名称">
              <el-input
                v-model="input_name"
                placeholder="请输入持有者的用户名或DID"
              ></el-input>
            </el-form-item>
            <el-form-item>
              <el-button
                type="primary"
                @click="handleRequest"
                :loading="requesting"
              >
                <template #default> 发起请求 </template>
                <template #loading>
                  <div class="custom-loading">
                    <svg class="circular" viewBox="-10, -10, 50, 50">
                      <path
                        class="path"
                        d="
                          M 30 15
                          L 28 17
                          M 25.61 25.61
                          A 15 15, 0, 0, 1, 15 30
                          A 15 15, 0, 1, 1, 27.99 7.5
                          L 15 15
                        "
                        style="stroke-width: 4px; fill: rgba(0, 0, 0, 0)"
                      />
                    </svg>
                  </div>
                </template>
              </el-button>
            </el-form-item>
          </el-form>
        </el-card>

        <!-- 持有者提交证书界面(省略) -->

        <!-- 验证证书界面 -->
        <el-card v-if="step === 2" shadow="hover">
          <template #header>
            <div class="card-header">
              <span>验证证书</span>
              <el-icon class="icon" color="#fda085"><Stamp /></el-icon>
            </div>
          </template>
          <el-descriptions
            title="证书信息"
            :column="1"
            border
            :contentStyle="{
              'white-space': 'pre-wrap',
              'word-break': 'break-all',
            }"
          >
            <el-descriptions-item label="证书类型">
              {{ vcvp.type }}
            </el-descriptions-item>
            <el-descriptions-item label="证书内容">
              {{ JSON.stringify(vcvp, null, 2) }}
            </el-descriptions-item>
            <el-descriptions-item label="颁发者">
              {{ vcvp.issuer }}
            </el-descriptions-item>
            <el-descriptions-item label="颁发时间">
              {{ vcvp.issuanceDate }}
            </el-descriptions-item>
          </el-descriptions>
          <div class="verify-footer">
            <el-tooltip
              effect="dark"
              content="检查证书的有效性和真实性"
              placement="top"
            >
              <el-button
                type="primary"
                @click="handleVerify"
                :loading="verifying"
                class="verify-button"
              >
                验证证书
              </el-button>
            </el-tooltip>
            <el-alert
              v-if="verifyResult"
              :title="verifyResult.title"
              :type="verifyResult.type"
              :description="verifyResult.message"
              show-icon
              class="verify-result"
            />
          </div>
        </el-card>
      </el-col>
    </el-row>
  </div>
</template>

<script setup lang="ts">
import { ref, reactive } from "vue";
import { Promotion, Stamp } from "@element-plus/icons-vue";

const requestForm = reactive({
  holderName: "",
});

const input_name = ref("");
const step = ref(0);
const requesting = ref(false);

interface VCVP {
  type: string;
  credentialSubject: any;
  issuer: string;
  issuanceDate: string;
  // 其他属性...
}

const vcvp = ref<VCVP | null>(null);
const verifying = ref(false);

interface VerifyResult {
  title: string;
  type: "success" | "error";
  message: string;
}

const verifyResult = ref<VerifyResult | null>(null);

const mockVCVP: VCVP = {
  type: "AlumniCredential",
  credentialSubject: {
    id: "did:example:ebfeb1f712ebc6f1c276e12ec21",
    alumniOf: {
      id: "did:example:c276e12ec21ebfeb1f712ebc6f1",
      name: "Example University",
    },
  },
  issuer: "https://example.edu/issuers/565049",
  issuanceDate: "2010-01-01T19:73:24Z",
};

const handleRequest = async () => {
  requesting.value = true;
  requestForm.holderName = input_name.value;
  // 模拟请求延迟
  await new Promise((resolve) => setTimeout(resolve, 1000));
  step.value = 1;
  // 模拟持有者提交证书延迟
  await new Promise((resolve) => setTimeout(resolve, 1000));
  vcvp.value = mockVCVP;
  step.value = 2;
  requesting.value = false;
};

const handleVerify = async () => {
  verifying.value = true;
  // 模拟验证延迟
  await new Promise((resolve) => setTimeout(resolve, 1000));
  // 模拟随机验证结果
  const isValid = Math.random() < 0.5;
  if (isValid) {
    verifyResult.value = {
      title: "验证成功",
      type: "success",
      message: "VC/VP验证成功,该证书真实有效。",
    };
  } else {
    verifyResult.value = {
      title: "验证失败",
      type: "error",
      message: "VC/VP验证失败,该证书无效。",
    };
  }
  verifying.value = false;

  // 将步骤设为3
  step.value = 3;
};
</script>

<style scoped>
.verify-view {
  padding: 2rem;
}

.header {
  text-align: center;
  margin-bottom: 2rem;
  background: linear-gradient(45deg, #f6d365, #fda085);
  color: white;
  padding: 2rem;
  border-radius: 4px;
}

.header h1 {
  font-size: 2.5rem;
  margin-bottom: 1rem;
}

.step-row {
  margin-bottom: 2rem;
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.card-header span {
  font-size: 1.25rem;
  font-weight: bold;
}

.card-header .icon {
  font-size: 1.5rem;
}

.verify-footer {
  text-align: center;
  margin-top: 2rem;
}

.verify-button {
  background: linear-gradient(45deg, #f6d365, #fda085);
  border: none;
  color: white;
  font-size: 1.25rem;
  padding: 12px 24px;
  border-radius: 4px;
  cursor: pointer;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
}

.verify-button:hover {
  box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
  transform: translateY(-2px);
}

.verify-result {
  margin-top: 1.5rem;
  text-align: center;
}

/* loading动画 */
.custom-loading .circular {
  width: 20px;
  height: 20px;
  animation: loading-rotate 2s linear infinite;
}

.custom-loading .path {
  animation: loading-dash 1.5s ease-in-out infinite;
  stroke-dasharray: 90, 150;
  stroke-dashoffset: 0;
  stroke-width: 2;
  stroke: var(--el-color-white);
  stroke-linecap: round;
}

@keyframes loading-rotate {
  100% {
    transform: rotate(360deg);
  }
}

@keyframes loading-dash {
  0% {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0;
  }
  50% {
    stroke-dasharray: 90, 150;
    stroke-dashoffset: -40px;
  }
  100% {
    stroke-dasharray: 90, 150;
    stroke-dashoffset: -120px;
  }
}
</style>

----- End of views/VerifyView.vue -----

----- Start of views/HomeView.vue -----
<template>
  <div class="home">
    <el-row justify="center" align="middle" class="slogan">
      <el-col :span="24">
        <h1>去中心化</h1>
        <h2>基于区块链的身份管理系统</h2>
        <p>安全、透明、高效,为您的证书提供可靠的存储和验证方案。</p>
        <div class="buttons">
          <el-button
            type="primary"
            size="large"
            round
            @click="$router.push('/login')"
            >登录</el-button
          >
          <el-button size="large" round @click="$router.push('/register')"
            >注册</el-button
          >
        </div>
      </el-col>
    </el-row>
    <el-row justify="space-around" class="features">
      <el-col :span="7">
        <el-card shadow="hover">
          <template #header>
            <div class="card-header">
              <span>安全可靠</span>
              <el-icon class="icon" color="#ff6b6b" :size="30"
                ><Lock
              /></el-icon>
            </div>
          </template>
          <div class="card-content">
            基于区块链技术,证书信息存储在分布式网络中,无法篡改,确保证书的真实性和可靠性。
          </div>
        </el-card>
      </el-col>
      <el-col :span="7">
        <el-card shadow="hover">
          <template #header>
            <div class="card-header">
              <span>透明高效</span>
              <el-icon class="icon" color="#5ccfe6" :size="30"
                ><Sunny
              /></el-icon>
            </div>
          </template>
          <div class="card-content">
            证书的整个生命周期都记录在区块链上,可以随时查询和验证,提高证书管理的透明度和效率。
          </div>
        </el-card>
      </el-col>
      <el-col :span="7">
        <el-card shadow="hover">
          <template #header>
            <div class="card-header">
              <span>易用灵活</span>
              <el-icon class="icon" color="#ff9a3c" :size="30"
                ><UserFilled
              /></el-icon>
            </div>
          </template>
          <div class="card-content">
            提供直观的 Web
            界面,用户可以方便地管理自己的证书,验证者也能快速验证证书的有效性。
          </div>
        </el-card>
      </el-col>
    </el-row>
  </div>
</template>

<script setup lang="ts">
import { Lock, Sunny, UserFilled } from "@element-plus/icons-vue";
</script>

<style scoped>
.home {
  text-align: center;
  padding: 2rem;
}

.slogan {
  height: 50vh;
  background: linear-gradient(45deg, #ff6b6b, #5ccfe6);
  color: white;
}

.slogan h1 {
  font-size: 4rem;
  margin-bottom: 1rem;
}

.slogan h2 {
  font-size: 2.5rem;
  margin-bottom: 2rem;
}

.slogan p {
  font-size: 1.5rem;
  margin-bottom: 3rem;
}

.buttons .el-button {
  margin: 0 1rem;
}

.features {
  margin-top: 3rem;
}

.features .el-card {
  height: 200px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.card-header span {
  font-size: 1.5rem;
  font-weight: bold;
}

.card-content {
  text-align: left;
}
</style>

----- End of views/HomeView.vue -----

----- Start of views/BlockInfoView.vue -----
<template>
  <div class="block-info-view">
    <div class="network-graph" ref="networkGraph"></div>
    <div class="global-info">
      <div class="info-item">
        <span class="label">Total Nodes:</span>
        <span class="value">{{ totalNodes }}</span>
      </div>
      <div class="info-item">
        <span class="label">Total Edges:</span>
        <span class="value">{{ totalEdges }}</span>
      </div>
    </div>
    <div class="node-info" v-if="selectedNode" ref="nodeInfo">
      <h3>{{ selectedNode.id }}</h3>
      <p>Type: {{ selectedNode.type }}</p>
      <p>DID: {{ selectedNode.did }}</p>
      <p>Transactions: {{ selectedNode.transactions }}</p>
      <p>Balance: {{ selectedNode.balance }}</p>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted } from "vue";
import * as d3 from "d3";

const networkGraph = ref<HTMLElement | null>(null);
const nodeInfo = ref<HTMLElement | null>(null);
const totalNodes = ref(0);
const totalEdges = ref(0);
const selectedNode = ref(null);

onMounted(() => {
  // 模拟区块链网络数据
  const data = {
    nodes: [
      {
        id: "node1",
        type: "miner",
        did: "did:example:123",
        transactions: 100,
        balance: 1000,
      },
      {
        id: "node2",
        type: "wallet",
        did: "did:example:456",
        transactions: 50,
        balance: 500,
      },
      {
        id: "node3",
        type: "contract",
        did: "did:example:789",
        transactions: 200,
        balance: 2000,
      },
      {
        id: "node4",
        type: "miner",
        did: "did:example:abc",
        transactions: 80,
        balance: 800,
      },
      {
        id: "node5",
        type: "wallet",
        did: "did:example:def",
        transactions: 30,
        balance: 300,
      },
      {
        id: "node6",
        type: "contract",
        did: "did:example:ghi",
        transactions: 150,
        balance: 1500,
      },
      {
        id: "node7",
        type: "miner",
        did: "did:example:jkl",
        transactions: 120,
        balance: 1200,
      },
    ],
    edges: [
      { source: "node1", target: "node2", type: "transfer", amount: 100 },
      { source: "node1", target: "node3", type: "call", gasUsed: 0.01 },
      { source: "node2", target: "node3", type: "call", gasUsed: 0.02 },
      { source: "node4", target: "node5", type: "transfer", amount: 200 },
      { source: "node4", target: "node6", type: "call", gasUsed: 0.015 },
      { source: "node5", target: "node6", type: "call", gasUsed: 0.025 },
      { source: "node7", target: "node1", type: "transfer", amount: 300 },
      { source: "node7", target: "node4", type: "transfer", amount: 150 },
    ],
  };

  // 更新全局统计信息
  totalNodes.value = data.nodes.length;
  totalEdges.value = data.edges.length;

  // 创建力导向图
  const forceGraph = d3
    .forceSimulation(data.nodes)
    .force(
      "link",
      d3
        .forceLink(data.edges)
        .id((d: any) => d.id)
        .distance((d: any) => {
          return 100; // 根据需要调整节点之间的距离
        })
    )
    .force("charge", d3.forceManyBody().strength(-800)) // 调整节点之间的斥力
    .force("center", d3.forceCenter(400, 300));

  // 创建 SVG 画布
  const svg = d3
    .select(networkGraph.value)
    .append("svg")
    .attr("width", 800)
    .attr("height", 600);

  // 定义箭头标记
  svg
    .append("defs")
    .append("marker")
    .attr("id", "arrow")
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 20)
    .attr("refY", 0)
    .attr("markerWidth", 6)
    .attr("markerHeight", 6)
    .attr("orient", "auto")
    .append("path")
    .attr("d", "M0,-5L10,0L0,5")
    .attr("fill", (d: any) => {
      if (d && d.type) {
        switch (d.type) {
          case "transfer":
            return "#8E5EA2";
          case "call":
            return "#3CBA9F";
          default:
            return "#F5A623";
        }
      }
      return "#F5A623"; // Default color if d or d.type is undefined
    });

  // 绘制边
  const edges = svg
    .append("g")
    .selectAll("line")
    .data(data.edges)
    .join("line")
    .attr("stroke", (d) => {
      switch (d.type) {
        case "transfer":
          return "#8E5EA2";
        case "call":
          return "#3CBA9F";
        default:
          return "#F5A623";
      }
    })
    .attr("stroke-width", (d) => {
      switch (d.type) {
        case "transfer":
          return 2;
        case "call":
          return 1;
        default:
          return 1.5;
      }
    })
    .attr("marker-end", "url(#arrow)");

  // 绘制节点
  const nodes = svg
    .append("g")
    .selectAll("circle")
    .data(data.nodes)
    .join("circle")
    .attr("r", (d) => {
      switch (d.type) {
        case "miner":
          return 25;
        case "wallet":
          return 20;
        case "contract":
          return 30;
        default:
          return 22;
      }
    })
    .attr("fill", (d) => {
      switch (d.type) {
        case "miner":
          return "#4C4C4C";
        case "wallet":
          return "#69b3a2";
        case "contract":
          return "#F8B195";
        default:
          return "#4d4d4d";
      }
    })
    .attr("stroke", "white")
    .attr("stroke-width", 2)
    .call(drag(forceGraph));

  // 节点文字
  const nodeLabels = svg
    .append("g")
    .selectAll("text")
    .data(data.nodes)
    .join("text")
    .attr("dx", 0)
    .attr("dy", 40)
    .text((d) => d.id)
    .attr("fill", "black")
    .attr("font-family", "Arial")
    .attr("font-size", 12)
    .attr("text-anchor", "middle");

  // 节点悬停事件
  nodes
    .on("mouseover", (event, d) => {
      d3.select(event.target).attr("r", (d) => {
        switch (d.type) {
          case "miner":
            return 30;
          case "wallet":
            return 25;
          case "contract":
            return 35;
          default:
            return 27;
        }
      });
      selectedNode.value = d;
      updateNodeInfoPosition();
    })
    .on("mouseout", (event, d) => {
      d3.select(event.target).attr("r", (d) => {
        switch (d.type) {
          case "miner":
            return 25;
          case "wallet":
            return 20;
          case "contract":
            return 30;
          default:
            return 22;
        }
      });
      selectedNode.value = null;
    });

  // 边悬停事件
  edges
    .on("mouseover", (event, d) => {
      d3.select(event.target).attr("stroke-width", 3);
      nodes.attr("opacity", (n) =>
        n === d.source || n === d.target ? 1 : 0.2
      );
      nodeLabels.attr("opacity", (n) =>
        n === d.source || n === d.target ? 1 : 0.2
      );
      edges.attr("opacity", (e) => (e === d ? 1 : 0.2));
    })
    .on("mouseout", (event, d) => {
      d3.select(event.target).attr("stroke-width", (d) => {
        switch (d.type) {
          case "transfer":
            return 2;
          case "call":
            return 1;
          default:
            return 1.5;
        }
      });
      nodes.attr("opacity", 1);
      nodeLabels.attr("opacity", 1);
      edges.attr("opacity", 1);
    });

  // 启动力导向图
  forceGraph.on("tick", () => {
    edges
      .attr("x1", (d) => (d.source as any).x)
      .attr("y1", (d) => (d.source as any).y)
      .attr("x2", (d) => (d.target as any).x)
      .attr("y2", (d) => (d.target as any).y);
    nodes.attr("cx", (d) => (d as any).x).attr("cy", (d) => (d as any).y);
    nodeLabels.attr("x", (d) => (d as any).x).attr("y", (d) => (d as any).y);
  });
});

// 更新节点信息框的位置
function updateNodeInfoPosition() {
  const infoBox = nodeInfo.value;
  if (!infoBox) return;

  const svg = networkGraph.value;
  if (!svg) return;

  const rect = svg.getBoundingClientRect();
  infoBox.style.left = `${rect.right + 10}px`;
  infoBox.style.top = `${rect.top + 10}px`;
}

// 拖拽交互
function drag(simulation: d3.Simulation<any, undefined>) {
  function dragstarted(event: any) {
    if (!event.active) simulation.alphaTarget(0.3).restart();
    event.subject.fx = event.subject.x;
    event.subject.fy = event.subject.y;
  }
  function dragged(event: any) {
    event.subject.fx = event.x;
    event.subject.fy = event.y;
  }
  function dragended(event: any) {
    if (!event.active) simulation.alphaTarget(0);
    event.subject.fx = null;
    event.subject.fy = null;
  }
  return d3
    .drag()
    .on("start", dragstarted)
    .on("drag", dragged)
    .on("end", dragended);
}
</script>

<style scoped>
.block-info-view {
  height: 100%;
  display: flex;
  flex-direction: column;
  position: relative;
  background: linear-gradient(45deg, #f7f7f7, #e0e0e0);
}

.network-graph {
  flex: 1;
  overflow: hidden;
  display: flex;
  justify-content: center;
  align-items: center;
}

.global-info {
  padding: 20px;
  background: rgba(255, 255, 255, 0.8);
  display: flex;
  justify-content: center;
  box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
}

.info-item {
  margin-right: 20px;
  padding: 10px 20px;
  background: white;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.label {
  font-weight: bold;
  color: #333;
}

.value {
  font-size: 24px;
  color: #69b3a2;
}

.node-info {
  position: absolute;
  padding: 10px;
  background: rgba(255, 255, 255, 0.9);
  border: 1px solid #ccc;
  border-radius: 4px;
  pointer-events: none;
  opacity: 0.9;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  max-width: 200px;
}
.node-info h3 {
  margin: 0 0 5px;
  font-size: 16px;
  color: #333;
}
.node-info p {
  margin: 0;
  font-size: 14px;
  color: #666;
}
</style>

----- End of views/BlockInfoView.vue -----

----- Start of store/user.js -----
import axios from "axios";
export default {
    namespaced: true,
    state: () => ({
        loginUser: {
            userName: "未登录",
            userRole: "notLogin", // 添加用户角色信息
        },
    }),
    actions: {
        async getLoginUser({ commit, state }) {
            if (state.loginUser.userName === "未登录") {
                try {
                    const response = await axios.post("http://localhost:8000/get_username", {});
                    const { isValid, username } = response.data;
                    if (isValid) {
                        commit("updateUser", { userName: username, userRole: "user" }); // 假设默认角色为user
                    }
                    else {
                        console.error("User is not logged in.");
                        commit("updateUser", { userName: "未登录", userRole: "notLogin" });
                    }
                }
                catch (error) {
                    console.error("Error fetching username:", error);
                }
            }
        },
    },
    mutations: {
        updateUser(state, payload) {
            state.loginUser = payload;
        },
    },
};
//# sourceMappingURL=user.js.map
----- End of store/user.js -----

----- Start of store/index.js -----
import { createStore } from "vuex";
import user from "./user";
export default createStore({
    mutations: {},
    actions: {},
    modules: {
        user,
    },
});
//# sourceMappingURL=index.js.map
----- End of store/index.js -----

----- Start of store/index.ts -----
import { createStore } from "vuex";
import user from "./user";
export default createStore({
  mutations: {},
  actions: {},
  modules: {
    user,
  },
});

----- End of store/index.ts -----

----- Start of store/user.ts -----
import { StoreOptions } from "vuex";
import axios from "axios";

export default {
  namespaced: true,
  state: () => ({
    loginUser: {
      userName: "未登录",
      userRole: "notLogin", // 添加用户角色信息
    },
  }),
  actions: {
    async getLoginUser({ commit }, loginUser) {
      if (loginUser) {
        commit("updateUser", loginUser);
      } else {
        // 模拟从后端获取登录用户信息
        const mockUser = {
          userName: "张三",
          userRole: "user",
        };
        commit("updateUser", mockUser);

        // 真实逻辑,与后端交互
        // try {
        //   const response = await axios.post(
        //     "http://localhost:8000/get_username",
        //     {}
        //   );
        //   const { isValid, username } = response.data;
        //   if (isValid) {
        //     commit("updateUser", { userName: username, userRole: "user" });
        //   } else {
        //     console.error("User is not logged in.");
        //     commit("updateUser", { userName: "未登录", userRole: "notLogin" });
        //   }
        // } catch (error) {
        //   console.error("Error fetching username:", error);
        // }
      }
    },
  },

  mutations: {
    updateUser(state, payload) {
      state.loginUser = payload;
    },
  },
} as StoreOptions<any>;

----- End of store/user.ts -----

----- Start of router/routes.ts -----
import { RouteRecordRaw } from "vue-router";
import HomeView from "@/views/HomeView.vue";
import VerifyView from "@/views/VerifyView.vue";
import BlockInfoView from "@/views/BlockInfoView.vue";
import LoginView from "@/views/LoginView.vue"; // 引入登录页面组件
import RegisterView from "@/views/RegisterView.vue";
import ACCESS_ENUM from "@/access/accessEnum"; // 引入 ACCESS_ENUM
import SimpleLayout from "@/layouts/SimpleLayout.vue";
import HolderView from "@/views/HolderView.vue";

export const routes: Array<RouteRecordRaw> = [
  {
    path: "/",
    redirect: "/home",
  },
  {
    path: "/home",
    name: "首页",
    component: HomeView,
  },
  {
    path: "/certification",
    name: "持有者证书管理",
    component: HolderView,
    meta: {
      access: ACCESS_ENUM.USER, // 添加权限控制
    },
  },
  {
    path: "/verification",
    name: "验证者验证证书",
    component: VerifyView,
  },
  // {
  //   path: "/blockInfo",
  //   name: "当前区块链信息",
  //   component: BlockInfoView,
  // },
  {
    path: "/login",
    name: "登录",
    component: LoginView,
    meta: {
      layout: SimpleLayout, // 指定登录页面的布局组件
    },
  },
  {
    path: "/register",
    name: "注册",
    component: RegisterView,
    meta: {
      layout: SimpleLayout, // 指定注册页面的布局组件
    },
  },
];

----- End of router/routes.ts -----

----- Start of router/index.js -----
import { createRouter, createWebHistory } from "vue-router";
import { routes } from "@/router/routes";
const router = createRouter({
    history: createWebHistory(process.env.BASE_URL),
    routes,
});
export default router;
//# sourceMappingURL=index.js.map
----- End of router/index.js -----

----- Start of router/routes.js -----
import HomeView from "@/views/HomeView.vue";
import ManageView from "@/views/ManageView.vue";
import VerifyView from "@/views/VerifyView.vue";
import BlockInfoView from "@/views/BlockInfoView.vue";
export const routes = [
    {
        path: "/",
        redirect: "/home",
    },
    {
        path: "/home",
        name: "首页",
        component: HomeView,
    },
    {
        path: "/certification",
        name: "持有者证书管理",
        component: ManageView,
        meta: {
            access: ACCESS_ENUM.USER, // 添加权限控制
        },
    },
    {
        path: "/verification",
        name: "验证者验证证书",
        component: VerifyView,
    },
    {
        path: "/blockInfo",
        name: "当前区块链信息",
        component: BlockInfoView,
    },
];
//# sourceMappingURL=routes.js.map
----- End of router/routes.js -----

----- Start of router/index.ts -----
import { createRouter, createWebHistory, RouteRecordRaw } from "vue-router";
import { routes } from "@/router/routes";

const router = createRouter({
  history: createWebHistory(process.env.BASE_URL),
  routes,
});

export default router;

----- End of router/index.ts -----

